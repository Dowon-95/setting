Rest API

1) HTTP (Hypertext Transfer Protocol)
	-하이퍼 텍스트를 빠르게 교환하기 위한 프로토콜의 일종이다.
	-서버와 클라이언트의 사이에서 어떻게 메시지를 교환할지 정해 놓은 규칙.
	-요청(Request) 와 응답(Response) 로 구성되어 있다.
	-비연결식
		FTP 나 Telnet 은 클라이언트가 서버에 정보를 요청해도 서버가 클라이언트와의 연결을 끊지 않지만, 
		HTTP는 클라이언트가 서버에 정보를 요청하면 응답코드와 내용을 전송하고 클라이언트와의 연결을 종료.

2) 브라우저에 URL을 입력 후 요청하여 서버에서 응답하는 과정까지
	1단계 :  탐색 및 시작
		사용자가 브라우저에 URL 입력하면, 브라우저는 DNS 룩업을 통해 웹주소를 찾은다음, 이 주소로 요청을 전송한다.
		(참고) DNS lookup 과정 (DNS 동작 방식) 
			* DNS : Domain Name System => 사람이 읽을수 있는 '도메인'을 기계가 읽을수 있는 IP주소로 변환하는 것.
			1. 브라우저에 naver.com 입력
			2. 컴퓨터의 hosts 파일에 naver.com 의 ip 주소 정보 확인
			3. hosts 파일에 정보가 없으면, 컴퓨터에 있는 local DNS cache 에 ip 주소가 있는지 확인
			4. hosts 파일에서도, DNS cache 에서도 ip 주소를 알아 낼수 없다면,  DNS 서버에 물어봐야 함.
			   
	2단계 : 클라이언트가 서버로 HTTP 요청 메시지 전송
		HTTP클라이언트(ex.브라우저) 는 웹서버로 리디렉션되는 요청 메시지를 작성
		요청 메시지가 웹서버로 전송되면 메시지를 읽을수 있고 응답을 작성할수 있다.

	3단계 : 웹서버가 HTTP응답을 클라이언트로 다시 전송
		웹서버가 요청을 수신한 후에 응답 메시지가 작성되고 브라우저(클라이언트)로 반환.
		HTTP 응답 메시지가 생성되면, 웹서버는 브라우저로 메시지를 다시 보내고, 브라오저는 응답을 수신하고 읽는다.

	4단계 : 브라우저에서 메시지 렌더링
		브라우저에서 응답 메시지를 렌더링 하고 브라우저에 웹페이지를 표시.


* Rest (Representational State Transfer) : 자원을 이름으로 구분하여 해당 자원의 상태를 주고 받는 모든것
	1. HTTP URI 를 통해 자원(Resource)를 명시하고,
	2. HTTP Method(POST, GET, PUT, DELETE, PATCH 등)를 통해
	3. 해당 자원 (URI)에 대한 CRUD Operation 을 적용하는 것을 의미한다.

	(참고) REST 에서의 CRUD Operation 동작 예시
		Create : 데이터 생성 (POST)
		Read : 데이터 조회 (GET)
		Update : 데이터 수정(PUT, PATCH)
		Delete : 데이터 삭제(DELETE)
		
	- 특징 
	1. Sever-Client 서버-클라이언트 구조
	2. Stateless 무상태
	3. Cacheable 캐시 처리 가능
	4. Layered System 계층화
	5. Uniform Interface 인터페이스 일관성

	- 장점
	  HTTP 프로토콜의 인프라를 그대로 사용하므로 REST API를 위한 별도의 인프라 구축 필요가 없음.
	  HTTP 프로토콜의 표준을 최대한 활용하여 여러 추가적인 장점을 함계 가져갈수 있음.
	  HTTP 표준 프로토콜에 따르는 모든 플랫폼에서 사용가능
	  Hypermedia API의 기본을 충실히 지키면서 범용성을 보장
	  REST API 메시지가 의도하는 바를 명확하게 나타내므로 의도하는 바를 쉽게 파악
	  여러가지 서비스 디자인에서 생길 수 있는 문제를 최소화
	  서버와 클라이언트의 역할을 명확하게 분리

	- 단점
	  표준 자체가 존재하지 않아 정의가 필요함
	  HTTP Method 형태가 제한적임
	  브라우저를 통해 테스트 할 일이 많은 서비스라면 쉽게 고칠수 있는 URL 보다 Header 정보의 값을 처리해야하므로 전문성이 요구됨
	  구형 브라우저에서 호환이 되지 않아 지원해주지 못하는 동작이 많음 (익스플로어)

* Rest API 란?
	Rest 원리를 따르는 API - 설계규칙을 지켜야 함.

* RESTful
	Rest 원리를 따르는 시스템 ( REST API의 설계규칙을 올바르게 지킨 시스템 )


